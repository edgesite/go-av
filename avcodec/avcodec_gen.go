// Code generated by robots; DO NOT EDIT.

package avcodec

import (
	avutil "github.com/ssttevee/go-av/avutil"
	common "github.com/ssttevee/go-av/internal/common"
	"runtime"
	"unsafe"
)

/*
#cgo pkg-config: libavcodec

#include <libavcodec/avcodec.h>
#include <libavcodec/packet.h>
*/
import "C"

type BitstreamFilter struct {
	Name         *common.CChar
	CodecIDs     *uint32
	PrivClass    *avutil.Class
	PrivDataSize int32
	Init         *[0]byte
	Filter       *[0]byte
	Close        *[0]byte
	Flush        *[0]byte
}
type BitstreamFilterContext struct {
	AvClass     *avutil.Class
	Filter      *BitstreamFilter
	Internal    *C.struct_AVBSFInternal
	PrivData    unsafe.Pointer
	ParIn       *Parameters
	ParOut      *Parameters
	TimeBaseIn  avutil.Rational
	TimeBaseOut avutil.Rational
}
type Codec struct {
	Name                 *common.CChar
	LongName             *common.CChar
	Type                 int32
	ID                   ID
	Capabilities         int32
	SupportedFramerates  *avutil.Rational
	PixFmts              *avutil.PixelFormat
	SupportedSamplerates *int32
	SampleFmts           *avutil.SampleFormat
	ChannelLayouts       *uint64
	MaxLowres            uint8
	PrivClass            *avutil.Class
	Profiles             *C.struct_AVProfile
	WrapperName          *common.CChar
	PrivDataSize         int32
	Next                 *Codec
	UpdateThreadContext  *[0]byte
	Defaults             *C.struct_AVCodecDefault
	InitStaticData       *[0]byte
	Init                 *[0]byte
	EncodeSub            *[0]byte
	Encode2              *[0]byte
	Decode               *[0]byte
	Close                *[0]byte
	SendFrame            *[0]byte
	ReceivePacket        *[0]byte
	ReceiveFrame         *[0]byte
	Flush                *[0]byte
	CapsInternal         int32
	Bsfs                 *common.CChar
	HwConfigs            **C.struct_AVCodecHWConfigInternal
	CodecTags            *C.uint32_t
}
type Context struct {
	AvClass                   *avutil.Class
	LogLevelOffset            int32
	CodecType                 avutil.MediaType
	Codec                     *Codec
	CodecID                   uint32
	CodecTag                  uint32
	PrivData                  unsafe.Pointer
	Internal                  *C.struct_AVCodecInternal
	Opaque                    unsafe.Pointer
	BitRate                   int64
	BitRateTolerance          int32
	GlobalQuality             int32
	CompressionLevel          int32
	Flags                     int32
	Flags2                    int32
	Extradata                 *uint8
	ExtradataSize             int32
	TimeBase                  avutil.Rational
	TicksPerFrame             int32
	Delay                     int32
	Width                     int32
	Height                    int32
	CodedWidth                int32
	CodedHeight               int32
	GopSize                   int32
	PixFmt                    avutil.PixelFormat
	DrawHorizBand             *[0]byte
	GetFormat                 *[0]byte
	MaxBFrames                int32
	BQuantFactor              C.float
	BFrameStrategy            int32
	BQuantOffset              C.float
	HasBFrames                int32
	MpegQuant                 int32
	IQuantFactor              C.float
	IQuantOffset              C.float
	LumiMasking               C.float
	TemporalCplxMasking       C.float
	SpatialCplxMasking        C.float
	PMasking                  C.float
	DarkMasking               C.float
	SliceCount                int32
	PredictionMethod          int32
	SliceOffset               *int32
	SampleAspectRatio         avutil.Rational
	MeCmp                     int32
	MeSubCmp                  int32
	MbCmp                     int32
	IldctCmp                  int32
	DiaSize                   int32
	LastPredictorCount        int32
	PreMe                     int32
	MePreCmp                  int32
	PreDiaSize                int32
	MeSubpelQuality           int32
	MeRange                   int32
	SliceFlags                int32
	MbDecision                int32
	IntraMatrix               *C.uint16_t
	InterMatrix               *C.uint16_t
	ScenechangeThreshold      int32
	NoiseReduction            int32
	IntraDcPrecision          int32
	SkipTop                   int32
	SkipBottom                int32
	MbLmin                    int32
	MbLmax                    int32
	MePenaltyCompensation     int32
	BidirRefine               int32
	BrdScale                  int32
	KeyintMin                 int32
	Refs                      int32
	Chromaoffset              int32
	Mv0Threshold              int32
	BSensitivity              int32
	ColorPrimaries            uint32
	ColorTrc                  uint32
	Colorspace                uint32
	ColorRange                uint32
	ChromaSampleLocation      uint32
	Slices                    int32
	FieldOrder                uint32
	SampleRate                int32
	Channels                  int32
	SampleFmt                 avutil.SampleFormat
	FrameSize                 int32
	FrameNumber               int32
	BlockAlign                int32
	Cutoff                    int32
	ChannelLayout             uint64
	RequestChannelLayout      uint64
	AudioServiceType          uint32
	RequestSampleFmt          int32
	GetBuffer2                *[0]byte
	RefcountedFrames          int32
	Qcompress                 C.float
	Qblur                     C.float
	Qmin                      int32
	Qmax                      int32
	MaxQdiff                  int32
	RcBufferSize              int32
	RcOverrideCount           int32
	RcOverride                *C.struct_RcOverride
	RcMaxRate                 int64
	RcMinRate                 int64
	RcMaxAvailableVbvUse      C.float
	RcMinVbvOverflowUse       C.float
	RcInitialBufferOccupancy  int32
	CoderType                 int32
	ContextModel              int32
	FrameSkipThreshold        int32
	FrameSkipFactor           int32
	FrameSkipExp              int32
	FrameSkipCmp              int32
	Trellis                   int32
	MinPredictionOrder        int32
	MaxPredictionOrder        int32
	TimecodeFrameStart        int64
	RtpCallback               *[0]byte
	RtpPayloadSize            int32
	MvBits                    int32
	HeaderBits                int32
	ITexBits                  int32
	PTexBits                  int32
	ICount                    int32
	PCount                    int32
	SkipCount                 int32
	MiscBits                  int32
	FrameBits                 int32
	StatsOut                  *common.CChar
	StatsIn                   *common.CChar
	WorkaroundBugs            int32
	StrictStdCompliance       int32
	ErrorConcealment          int32
	Debug                     int32
	ErrRecognition            int32
	ReorderedOpaque           int64
	Hwaccel                   *C.struct_AVHWAccel
	HwaccelContext            unsafe.Pointer
	Error                     [8]uint64
	DctAlgo                   int32
	IdctAlgo                  int32
	BitsPerCodedSample        int32
	BitsPerRawSample          int32
	Lowres                    int32
	CodedFrame                *avutil.Frame
	ThreadCount               int32
	ThreadType                int32
	ActiveThreadType          int32
	ThreadSafeCallbacks       int32
	Execute                   *[0]byte
	Execute2                  *[0]byte
	NsseWeight                int32
	Profile                   int32
	Level                     int32
	SkipLoopFilter            int32
	SkipIdct                  int32
	SkipFrame                 int32
	SubtitleHeader            *uint8
	SubtitleHeaderSize        int32
	VbvDelay                  uint64
	SideDataOnlyPackets       int32
	InitialPadding            int32
	Framerate                 avutil.Rational
	SwPixFmt                  int32
	PktTimebase               avutil.Rational
	CodecDescriptor           *C.struct_AVCodecDescriptor
	PtsCorrectionNumFaultyPts int64
	PtsCorrectionNumFaultyDts int64
	PtsCorrectionLastPts      int64
	PtsCorrectionLastDts      int64
	SubCharenc                *common.CChar
	SubCharencMode            int32
	SkipAlpha                 int32
	SeekPreroll               int32
	DebugMv                   int32
	ChromaIntraMatrix         *C.uint16_t
	DumpSeparator             *uint8
	CodecWhitelist            *common.CChar
	Properties                uint32
	CodedSideData             *C.struct_AVPacketSideData
	NbCodedSideData           int32
	HwFramesCtx               *avutil.BufferRef
	SubTextFormat             int32
	TrailingPadding           int32
	MaxPixels                 int64
	HwDeviceCtx               *avutil.BufferRef
	HwaccelFlags              int32
	ApplyCropping             int32
	ExtraHwFrames             int32
	DiscardDamagedPercentage  int32
	MaxSamples                int64
	ExportSideData            int32
	_                         [4]byte
}
type Packet struct {
	Buf                 *avutil.BufferRef
	Pts                 int64
	Dts                 int64
	Data                *uint8
	Size                int32
	StreamIndex         int32
	Flags               int32
	SideData            *C.struct_AVPacketSideData
	SideDataElems       int32
	Duration            int64
	Pos                 int64
	ConvergenceDuration int64
}
type Parameters struct {
	CodecType          int32
	CodecID            ID
	CodecTag           C.uint32_t
	Extradata          *uint8
	ExtradataSize      int32
	Format             int32
	BitRate            int64
	BitsPerCodedSample int32
	BitsPerRawSample   int32
	Profile            int32
	Level              int32
	Width              int32
	Height             int32
	SampleAspectRatio  avutil.Rational
	FieldOrder         uint32
	ColorRange         uint32
	ColorPrimaries     uint32
	ColorTrc           uint32
	ColorSpace         uint32
	ChromaLocation     uint32
	VideoDelay         int32
	ChannelLayout      uint64
	Channels           int32
	SampleRate         int32
	BlockAlign         int32
	FrameSize          int32
	InitialPadding     int32
	TrailingPadding    int32
	SeekPreroll        int32
	_                  [4]byte
}

func CopyParameters(p0 *Parameters, p1 *Parameters) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.avcodec_parameters_copy((*C.struct_AVCodecParameters)(unsafe.Pointer(p0)), (*C.struct_AVCodecParameters)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func FindDecoder(p0 ID) *Codec {
	return (*Codec)(unsafe.Pointer(C.avcodec_find_decoder((uint32)(p0))))
}
func FindDecoderByName(p0 string) *Codec {
	var s0 *C.char
	if p0 != "" {
		s0 = C.CString(p0)
		defer C.free(unsafe.Pointer(s0))
	}
	return (*Codec)(unsafe.Pointer(C.avcodec_find_decoder_by_name(s0)))
}
func FindEncoder(p0 ID) *Codec {
	return (*Codec)(unsafe.Pointer(C.avcodec_find_encoder((uint32)(p0))))
}
func FindEncoderByName(p0 string) *Codec {
	var s0 *C.char
	if p0 != "" {
		s0 = C.CString(p0)
		defer C.free(unsafe.Pointer(s0))
	}
	return (*Codec)(unsafe.Pointer(C.avcodec_find_encoder_by_name(s0)))
}
func FreeBitstreamFilter(p0 **BitstreamFilterContext) {
	defer runtime.KeepAlive(p0)
	C.av_bsf_free((**C.struct_AVBSFContext)(unsafe.Pointer(p0)))
}
func FreeContext(p0 **Context) {
	defer runtime.KeepAlive(p0)
	C.avcodec_free_context((**C.struct_AVCodecContext)(unsafe.Pointer(p0)))
}
func FreePacket(p0 **Packet) {
	defer runtime.KeepAlive(p0)
	C.av_packet_free((**C.struct_AVPacket)(unsafe.Pointer(p0)))
}
func GetBitstreamFilterByName(p0 string) *BitstreamFilter {
	var s0 *C.char
	if p0 != "" {
		s0 = C.CString(p0)
		defer C.free(unsafe.Pointer(s0))
	}
	return (*BitstreamFilter)(unsafe.Pointer(C.av_bsf_get_by_name(s0)))
}
func InitBitstreamFilter(p0 *BitstreamFilterContext) int32 {
	defer runtime.KeepAlive(p0)
	ret := C.av_bsf_init((*C.struct_AVBSFContext)(unsafe.Pointer(p0)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func NewBitstreamFilter(p0 *BitstreamFilter, p1 **BitstreamFilterContext) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.av_bsf_alloc((*C.struct_AVBitStreamFilter)(unsafe.Pointer(p0)), (**C.struct_AVBSFContext)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func NewContext(p0 *Codec) *Context {
	defer runtime.KeepAlive(p0)
	return (*Context)(unsafe.Pointer(C.avcodec_alloc_context3((*C.struct_AVCodec)(unsafe.Pointer(p0)))))
}
func NewPacket() *Packet {
	return (*Packet)(unsafe.Pointer(C.av_packet_alloc()))
}
func Open(p0 *Context, p1 *Codec, p2 **avutil.Dictionary) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	ret := C.avcodec_open2((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVCodec)(unsafe.Pointer(p1)), (**C.struct_AVDictionary)(unsafe.Pointer(p2)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ParametersFromContext(p0 *Parameters, p1 *Context) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.avcodec_parameters_from_context((*C.struct_AVCodecParameters)(unsafe.Pointer(p0)), (*C.struct_AVCodecContext)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ParametersToContext(p0 *Context, p1 *Parameters) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.avcodec_parameters_to_context((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVCodecParameters)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ReceiveBitstreamFilterPacket(p0 *BitstreamFilterContext, p1 *Packet) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.av_bsf_receive_packet((*C.struct_AVBSFContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ReceiveFrame(p0 *Context, p1 *avutil.Frame) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.avcodec_receive_frame((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVFrame)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ReceivePacket(p0 *Context, p1 *Packet) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.avcodec_receive_packet((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func RefPacket(p0 *Packet, p1 *Packet) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.av_packet_ref((*C.struct_AVPacket)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SendBitstreamFilterPacket(p0 *BitstreamFilterContext, p1 *Packet) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.av_bsf_send_packet((*C.struct_AVBSFContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SendFrame(p0 *Context, p1 *avutil.Frame) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.avcodec_send_frame((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVFrame)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SendPacket(p0 *Context, p1 *Packet) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.avcodec_send_packet((*C.struct_AVCodecContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func UnrefPacket(p0 *Packet) {
	defer runtime.KeepAlive(p0)
	C.av_packet_unref((*C.struct_AVPacket)(unsafe.Pointer(p0)))
}
func getName(p0 uint32) *common.CChar {
	return (*common.CChar)(unsafe.Pointer(C.avcodec_get_name(p0)))
}
