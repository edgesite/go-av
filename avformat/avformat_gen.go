// Code generated by robots; DO NOT EDIT.

package avformat

import (
	avcodec "github.com/ssttevee/go-av/avcodec"
	avutil "github.com/ssttevee/go-av/avutil"
	common "github.com/ssttevee/go-av/internal/common"
	"runtime"
	"unsafe"
)

/*
#cgo pkg-config: libavformat

#include <libavformat/avformat.h>
*/
import "C"

type Context struct {
	AvClass                     *avutil.Class
	Iformat                     *InputFormat
	Oformat                     *C.struct_AVOutputFormat
	PrivData                    unsafe.Pointer
	Pb                          *IOContext
	CtxFlags                    int32
	NbStreams                   uint32
	Streams                     **Stream
	Filename                    [1024]common.CChar
	Url                         *common.CChar
	StartTime                   int64
	Duration                    int64
	BitRate                     int64
	PacketSize                  uint32
	MaxDelay                    int32
	Flags                       int32
	Probesize                   int64
	MaxAnalyzeDuration          int64
	Key                         *uint8
	Keylen                      int32
	NbPrograms                  uint32
	Programs                    **C.struct_AVProgram
	VideoCodecID                uint32
	AudioCodecID                uint32
	SubtitleCodecID             uint32
	MaxIndexSize                uint32
	MaxPictureBuffer            uint32
	NbChapters                  uint32
	Chapters                    **C.struct_AVChapter
	Metadata                    *avutil.Dictionary
	StartTimeRealtime           int64
	FpsProbeSize                int32
	ErrorRecognition            int32
	InterruptCallback           C.struct_AVIOInterruptCB
	Debug                       int32
	MaxInterleaveDelta          int64
	StrictStdCompliance         int32
	EventFlags                  int32
	MaxTsProbe                  int32
	AvoidNegativeTs             int32
	TsID                        int32
	AudioPreload                int32
	MaxChunkDuration            int32
	MaxChunkSize                int32
	UseWallclockAsTimestamps    int32
	AvioFlags                   int32
	DurationEstimationMethod    uint32
	SkipInitialBytes            int64
	CorrectTsOverflow           uint32
	Seek2Any                    int32
	FlushPackets                int32
	ProbeScore                  int32
	FormatProbesize             int32
	CodecWhitelist              *common.CChar
	FormatWhitelist             *common.CChar
	Internal                    *C.struct_AVFormatInternal
	IoRepositioned              int32
	VideoCodec                  *avcodec.Codec
	AudioCodec                  *avcodec.Codec
	SubtitleCodec               *avcodec.Codec
	DataCodec                   *avcodec.Codec
	MetadataHeaderPadding       int32
	Opaque                      unsafe.Pointer
	ControlMessageCb            C.av_format_control_message
	OutputTsOffset              int64
	DumpSeparator               *uint8
	DataCodecID                 uint32
	OpenCb                      *[0]byte
	ProtocolWhitelist           *common.CChar
	IoOpen                      *[0]byte
	IoClose                     *[0]byte
	ProtocolBlacklist           *common.CChar
	MaxStreams                  int32
	SkipEstimateDurationFromPts int32
	MaxProbePackets             int32
	_                           [4]byte
}
type IOContext struct {
	AvClass             *avutil.Class
	Buffer              *byte
	BufferSize          int32
	BufPtr              *byte
	BufEnd              *byte
	Opaque              unsafe.Pointer
	ReadPacket          *[0]byte
	WritePacket         *[0]byte
	Seek                *[0]byte
	Pos                 int64
	EofReached          int32
	WriteFlag           int32
	MaxPacketSize       int32
	Checksum            C.ulong
	ChecksumPtr         *byte
	UpdateChecksum      *[0]byte
	Error               int32
	ReadPause           *[0]byte
	ReadSeek            *[0]byte
	Seekable            int32
	Maxsize             int64
	Direct              int32
	BytesRead           int64
	SeekCount           int32
	WriteoutCount       int32
	OrigBufferSize      int32
	ShortSeekThreshold  int32
	ProtocolWhitelist   *common.CChar
	ProtocolBlacklist   *common.CChar
	WriteDataType       *[0]byte
	IgnoreBoundaryPoint int32
	CurrentType         uint32
	LastTime            int64
	ShortSeekGet        *[0]byte
	Written             int64
	BufPtrMax           *byte
	MinPacketSize       int32
	_                   [4]byte
}
type InputFormat struct {
	Name                     *common.CChar
	LongName                 *common.CChar
	Flags                    int32
	Extensions               *common.CChar
	CodecTag                 **C.struct_AVCodecTag
	PrivClass                *avutil.Class
	MimeType                 *common.CChar
	Next                     *InputFormat
	RawCodecID               int32
	PrivDataSize             int32
	ReadProbe                *[0]byte
	ReadHeader               *[0]byte
	ReadPacket               *[0]byte
	ReadClose                *[0]byte
	ReadSeek                 *[0]byte
	ReadTimestamp            *[0]byte
	ReadPlay                 *[0]byte
	ReadPause                *[0]byte
	ReadSeek2                *[0]byte
	GetDeviceList            *[0]byte
	CreateDeviceCapabilities *[0]byte
	FreeDeviceCapabilities   *[0]byte
}
type Stream struct {
	Index                           int32
	ID                              int32
	Codec                           *avcodec.Context
	PrivData                        unsafe.Pointer
	TimeBase                        avutil.Rational
	StartTime                       int64
	Duration                        int64
	NbFrames                        int64
	Disposition                     int32
	Discard                         int32
	SampleAspectRatio               avutil.Rational
	Metadata                        *avutil.Dictionary
	AvgFrameRate                    avutil.Rational
	AttachedPic                     avcodec.Packet
	SideData                        *C.struct_AVPacketSideData
	NbSideData                      int32
	EventFlags                      int32
	RFrameRate                      avutil.Rational
	RecommendedEncoderConfiguration *common.CChar
	Codecpar                        *avcodec.Parameters
	Info                            *C.struct___0
	PtsWrapBits                     int32
	FirstDts                        int64
	CurDts                          int64
	LastIPPts                       int64
	LastIPDuration                  int32
	ProbePackets                    int32
	CodecInfoNbFrames               int32
	NeedParsing                     uint32
	Parser                          *C.struct_AVCodecParserContext
	LastInPacketBuffer              *C.struct_AVPacketList
	ProbeData                       C.struct_AVProbeData
	PtsBuffer                       [17]int64
	IndexEntries                    *C.struct_AVIndexEntry
	NbIndexEntries                  int32
	IndexEntriesAllocatedSize       uint32
	StreamIdentifier                int32
	ProgramNum                      int32
	PmtVersion                      int32
	PmtStreamIdx                    int32
	InterleaverChunkSize            int64
	InterleaverChunkDuration        int64
	RequestProbe                    int32
	SkipToKeyframe                  int32
	SkipSamples                     int32
	StartSkipSamples                int64
	FirstDiscardSample              int64
	LastDiscardSample               int64
	NbDecodedFrames                 int32
	MuxTsOffset                     int64
	PtsWrapReference                int64
	PtsWrapBehavior                 int32
	UpdateInitialDurationsDone      int32
	PtsReorderError                 [17]int64
	PtsReorderErrorCount            [17]uint8
	LastDtsForOrderCheck            int64
	DtsOrdered                      uint8
	DtsMisordered                   uint8
	InjectGlobalSideData            int32
	DisplayAspectRatio              avutil.Rational
	Internal                        *C.struct_AVStreamInternal
}

func CloseIO(p0 *IOContext) int32 {
	defer runtime.KeepAlive(p0)
	ret := C.avio_close((*C.struct_AVIOContext)(unsafe.Pointer(p0)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func CloseInput(p0 **Context) {
	defer runtime.KeepAlive(p0)
	C.avformat_close_input((**C.struct_AVFormatContext)(unsafe.Pointer(p0)))
}
func FindBestStream(p0 *Context, p1 MediaType, p2 int32, p3 int32, p4 **avcodec.Codec, p5 int32) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p2)
	defer runtime.KeepAlive(p3)
	defer runtime.KeepAlive(p4)
	defer runtime.KeepAlive(p5)
	ret := C.av_find_best_stream((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (int32)(p1), *(*C.int)(unsafe.Pointer(&p2)), *(*C.int)(unsafe.Pointer(&p3)), (**C.struct_AVCodec)(unsafe.Pointer(p4)), *(*C.int)(unsafe.Pointer(&p5)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func FindStreamInfo(p0 *Context, p1 **avutil.Dictionary) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.avformat_find_stream_info((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (**C.struct_AVDictionary)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func FreeContext(p0 *Context) {
	defer runtime.KeepAlive(p0)
	C.avformat_free_context((*C.struct_AVFormatContext)(unsafe.Pointer(p0)))
}
func FreeIOContext(p0 **IOContext) {
	defer runtime.KeepAlive(p0)
	C.avio_context_free((**C.struct_AVIOContext)(unsafe.Pointer(p0)))
}
func GuessFrameRate(p0 *Context, p1 *Stream, p2 *avutil.Frame) avutil.Rational {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	ret := C.av_guess_frame_rate((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (*C.struct_AVStream)(unsafe.Pointer(p1)), (*C.struct_AVFrame)(unsafe.Pointer(p2)))
	return *(*avutil.Rational)(unsafe.Pointer(&ret))
}
func NewContext() *Context {
	return (*Context)(unsafe.Pointer(C.avformat_alloc_context()))
}
func NewIOContext(p0 *byte, p1 int32, p2 int32, p3 unsafe.Pointer, p4 unsafe.Pointer, p5 unsafe.Pointer, p6 unsafe.Pointer) *IOContext {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	return (*IOContext)(unsafe.Pointer(C.avio_alloc_context((*C.uchar)(unsafe.Pointer(p0)), *(*C.int)(unsafe.Pointer(&p1)), *(*C.int)(unsafe.Pointer(&p2)), p3, (*[0]byte)(p4), (*[0]byte)(p5), (*[0]byte)(p6))))
}
func NewOutputContext(p0 **Context, p1 *C.struct_AVOutputFormat, p2 string, p3 string) int32 {
	defer runtime.KeepAlive(p0)
	var s2 *C.char
	if p2 != "" {
		s2 = C.CString(p2)
		defer C.free(unsafe.Pointer(s2))
	}
	var s3 *C.char
	if p3 != "" {
		s3 = C.CString(p3)
		defer C.free(unsafe.Pointer(s3))
	}
	ret := C.avformat_alloc_output_context2((**C.struct_AVFormatContext)(unsafe.Pointer(p0)), p1, s2, s3)
	return *(*int32)(unsafe.Pointer(&ret))
}
func NewStream(p0 *Context, p1 *avcodec.Codec) *Stream {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	return (*Stream)(unsafe.Pointer(C.avformat_new_stream((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (*C.struct_AVCodec)(unsafe.Pointer(p1)))))
}
func OpenIO(p0 **IOContext, p1 string, p2 int32) int32 {
	defer runtime.KeepAlive(p0)
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	defer runtime.KeepAlive(p2)
	ret := C.avio_open((**C.struct_AVIOContext)(unsafe.Pointer(p0)), s1, *(*C.int)(unsafe.Pointer(&p2)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func OpenInput(p0 **Context, p1 string, p2 *InputFormat, p3 **avutil.Dictionary) int32 {
	defer runtime.KeepAlive(p0)
	var s1 *C.char
	if p1 != "" {
		s1 = C.CString(p1)
		defer C.free(unsafe.Pointer(s1))
	}
	defer runtime.KeepAlive(p2)
	defer runtime.KeepAlive(p3)
	ret := C.avformat_open_input((**C.struct_AVFormatContext)(unsafe.Pointer(p0)), s1, (*C.struct_AVInputFormat)(unsafe.Pointer(p2)), (**C.struct_AVDictionary)(unsafe.Pointer(p3)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func ReadFrame(p0 *Context, p1 *avcodec.Packet) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.av_read_frame((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func SeekFile(p0 *Context, p1 int32, p2 int64, p3 int64, p4 int64, p5 int32) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	defer runtime.KeepAlive(p2)
	defer runtime.KeepAlive(p3)
	defer runtime.KeepAlive(p4)
	defer runtime.KeepAlive(p5)
	ret := C.avformat_seek_file((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), *(*C.int)(unsafe.Pointer(&p1)), *(*C.int64_t)(unsafe.Pointer(&p2)), *(*C.int64_t)(unsafe.Pointer(&p3)), *(*C.int64_t)(unsafe.Pointer(&p4)), *(*C.int)(unsafe.Pointer(&p5)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func WriteHeader(p0 *Context, p1 **avutil.Dictionary) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.avformat_write_header((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (**C.struct_AVDictionary)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func WriteInterleavedFrame(p0 *Context, p1 *avcodec.Packet) int32 {
	defer runtime.KeepAlive(p0)
	defer runtime.KeepAlive(p1)
	ret := C.av_interleaved_write_frame((*C.struct_AVFormatContext)(unsafe.Pointer(p0)), (*C.struct_AVPacket)(unsafe.Pointer(p1)))
	return *(*int32)(unsafe.Pointer(&ret))
}
func WriteTrailer(p0 *Context) int32 {
	defer runtime.KeepAlive(p0)
	ret := C.av_write_trailer((*C.struct_AVFormatContext)(unsafe.Pointer(p0)))
	return *(*int32)(unsafe.Pointer(&ret))
}
